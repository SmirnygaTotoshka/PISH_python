# Организация работы

## Введение

Как говорил Шерлок Холмс в исполнении великого актёра Василия Ливанова: "В моём чердаке только необходимые мне инструменты. Их много, но они в идеальном порядке и всегда под рукой. А лишнего хлама мне не нужно". Также должно быть и с нашим рабочим пространством. В целях воспроизводимости и уменьшения хаоса и стресса работу над кодом организуют в проекты. Проект имеет свою структуру и некоторые зависимости. Здесь будут рассмотрены лучшие практики по организации работы.

## Организация файловой системы

В проекте обязательно должны быть определенные папки и файлы:

-   README - обязательный файл, содержащий описание проекта: о чем проект, как устанавливать, как запускать.

-   environment.yml/pyproject.toml/requirements.txt - файл, описывающий окружение. Используемые зависимости и их версии. Вид этого файла отличается в зависимости от выбранного менеджера зависимостей.

-   src - папка с исходным кодом проекта

-   docs - папка с документацией проекта

-   tests - папка, содержащая тестовые проверки и тестовые скрипты

Если вы работатет над библиотекой, то в корне проекта должен быть файл setup.py, описывающий как пакет должен устанавливаться и распространятся. Не запускайте этот файл самостоятельно. Его вызывает pip при установке пакета. Пример такого файла представлен на @lst-setup. Вы можете установить к себе вашу библиотеку через pip следующим образом.

``` bash
pip install path/to/project/dir
```

``` {#lst-setup .python lst-cap="Пример файла setup.py"}
# -*- coding: utf-8 -*-

# Learn more: https://github.com/kennethreitz/setup.py

from setuptools import setup, find_packages


with open('README.rst') as f:
    readme = f.read()

with open('LICENSE') as f:
    license = f.read()

setup(
    name='sample',
    version='0.1.0',
    description='Sample package for Python-Guide.org',
    long_description=readme,
    author='Kenneth Reitz',
    author_email='me@kennethreitz.com',
    url='https://github.com/kennethreitz/samplemod',
    license=license,
    packages=find_packages(exclude=('tests', 'docs'))
)
```

В папках src, tests код может быть организован по некоторым логическим частям - модулям. Каждый модуль должен лежать внутри своей папки и содержать файл \_\_init\_\_.py, который сигнализирует интерпретатору, что код в этой папке это модуль. В этом файле можно настраивать некоторые параметры, необходимые для вас.

Также рекомендую выделить отдельный папки под изображения, входные и выходные данные.

### Тесты

В python существуют специальные библиотеки, предназначенные для автоматического тестирования работы отдельных фрагментов кода (юнитов). Такие тесты называют юнит-тестами. Основный их механизм проверка assert выражений после вызова юнита. Краткий обзор библиотек pytest, unittest можно посмотреть [здесь](https://tproger.ru/articles/testiruem-na-python-unittest-i-pytest-instrukcija-dlja-nachinajushhih).

### Документация

Для написания документации рекомендую [Sphinx](https://www.sphinx-doc.org/en/master/usage/quickstart.html). Данная библиотека позволяет генерировать сайты с документацией как извлекая специальные комментарии из файлов с кодом, так и из отдельных файлов rst или markdown. Документация и тесты должны покрывать максимально возможное количество аспектов вашего проекта.

## Особенности написания кода

1.  Используйте относительные пути к файлам. Структура файловой системы в абсолютном выражении может у всех отличаться, но относительно структуры проекта у всех будет всё одинаково

2.  Пишите понятные docstring с учетом выбранной вами системы документирования. Так вы упростите себе сбор документации о проекте.

3.  Помните о дзене питона (особенно пункты про простоту):

    ```{python}
    import this
    ```

## Управление зависимостями

Для Python разработано несколько систем управления зависимостями

-   pip - позволяет устанавливать пакеты Python из локальных проектов и PyPI. Простые виртуальные окружения Python и нет автоматической[^pish9-1] окружения

-   conda - позволяет устанавливать библиотеки Python, R, сторонние программы. Нет автоматической блокировки окружения. Рекомендую использовать её версию от других разработчиков - mamba.

-   poetry - позволяет устанавливать библиотеки Python, есть автоматическая блокировка окружения. Свои команды на запуск приложений и рабоыт с проектом.

-   pixi - объединяет функционал conda и poetry с их достоинствами, но пока находится на ранней стадии своей разработки.

[^pish9-1]: фиксация, установленных на данный момент, зависимостей и их версий.

Устанавливайте зависимости только через один выбранный менеджер и регулярно обновляйте файл с описанием окружения.

## Система контроля версий и резервное копирование

Самая используемая система контроля версий на сегодняшний момент - git. git позволяет делать снимки состояний, по которым можно отследить историю изменений каждого файла в проекте. В случае возникновения ошибок всегда можно вернуться к рабочей версии. git позволяет работать независимо над одним проектам большому количеству людей без ущерба работоспособности проекта в целом благодаря механизму ветвления. Он работает гораздо быстрее своих конкурентов и существуют платформы для облачного хранения своих проектов (GitHub). Ознакомится с git можно по материалам в интернете и [моей лекции](https://disk.yandex.ru/d/H3sfPSN2msZWYQ). Обязательно подключайте git к вашему проекту сразу после его создания.

У каждого разработчика при использовании git в проекте будет своя независимая копия, что обеспечивает защиту от потери файлов и данных. Не рекомендую хранить в git чувствительные данные и большие файлы. В первом случае, может произойти их утечка, во-втором хранение истории больших файлов может замедлить работу git. Кроме того, GitHub в бесплатной версии имеет ограничение на загрузку в 25 МБ. Для резервного копирования больших файлов используйте облачные решения: Nextcloud, OwnCloud, Яндекс Диск и другие.

## Итоги

1.  Организуйте свою работу в проекты
2.  Проект должен иметь чёткую структуру и документацию.
3.  Используйте версионирование, менеджеры зависимостей и резервное копирование

::: callout-note
# На заметку

Даже если вы не будете биоинформатиком, крайне рекомендую освоить перечисленные инструменты для организации своей работы и использовать в своей работе.
:::

## Задание

Оформите решение задания с предыдущего занятия согласно указанным рекомендациям.