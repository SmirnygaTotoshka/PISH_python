# Подготовка среды разработки

## О языке программирования Python

Python (далее просто питон, хотя правильнее говорить"пайтон") - интерпретируемый, объектно-ориентированный язык программирования высокого уровня с динамической типизацией. Давайте разбираться в каждом из приведенном в этом описании терминах.

### Язык программирования

Программисты занимается ничем иным как формулированием алгоритмов для исполнителя (компьютера). Алгоритм можно записать 4 способами:

-   Словесный - словами на любом естественном языке

-   Графический - в виде блок-схем, графических примитивов, обозначающих какое-либо действие

-   Псевдокод - словесное описание, сделанное в виде компьютерных команд

-   Язык программирования - в виде команд, которые можно перевести в понятные длякомпьютера инструкции.

Компьютер пока понимает только алгоритмы, записанные на языке программирования, поэтому для описания пути к решению наших задач мы вынуждены использовать их. Программа - алгоритм, написанный на языке программирования.

### Интерпретируемость

Команды, записанные на языке программирования, необходимо перевести в понятные для компьютера инструкции. Существуют два глобальных способа:

1.  Компиляция - проведенная заранее конвертация всего кода программы в машинный код
2.  Интерпретация - построчное выполнение программы

Для компилируемых языков все связи и типы данных определяются в основном на этапе компиляции. С такими языками надо заранее продумывать все подробности структуры программы, но взамен получаете более высокую скорость выполнения. Для интерпретируемых языков контекст определяется непосредственно в момент выполнения команды, что упрощает разработку, позволяет легко подстраивать алгоритм под ситуацию, но сильно уменьшает время выполнения в сравнении с компилируемыми языками.

### Объектно-ориентированность

Подробнее речь про объектно-ориентированную парадигму программирования будет идти на занятиях 10 и 11. Сейчас ограничимся общими положениями. Каждая сущность в питон это объект - абстрактная модель окружающей нас действительности, обладающая такими свойствами и поведением, которое необходимо и достаточно для решения поставленных задач. Любая переменная, любая функция в питон - это объект, описываемый свойствами, к которым можно получить доступ, и над которым можно совершать определенные действия (реализовывать поведение).

### Высокий и низкий уровнь.

Языки программирования работают на разных уровнях абстракции. Те языки, которые работают непосредственно с физическими уровнями памяти и инструкциями процессора принято называть языками низкого уровня. Языки, которые работают с сложными абстрактными операциями, называют языками высокого уровня. Кажущаяся нам простой операция сложения двух чисел, которая на питоне записывается в одну строку, на ассемблере (классе языков низкого уровня) будет записываться в несколько процедур.

### Типизация

Как было показано на прошлом занятии, нас окружает информация разного типа: целые числа, числа с плавающей точкой, текст и т.д. Принципы работы с этими данными разные. Существуют два класса языков в зависимости от того, кто определяет тип информации, которая должна храниться в ячейке памяти (переменной). Если это задает программист на этапе написания кода программы, то язык имеет статическую типизацию. Попытка записать в такую переменную другого типа приведет к ошибке. Если тип переменной зависит от её текущего значения, а не задается программистом заранее, то язык имеет динамическую типизацию.

## Системы управления зависимостями

Возникает большое количество проблем, связанных с использованием как чужого кода, так и своего. Одна из таких проблем заключается в том, что программист, работая над разными задачами на одном устройстве, сталкивается с тем, что для их решения нужны несовместимые программы. А устройство одно. Решение заключается в создании на устройстве изолированной виртуальной среды, в которой программы, необходимые для одной задачи не будут конфликтовать с другими.

Для питона существует специальная система управления такими виртуальными средами и программами, которые называются зависимостями (так как от них зависят ваши программы). Называется Anaconda, её [офицальный сайт.](https://anaconda.org/) Она обладает хорошим интерфейсом командной строки, но медленным графическим интерфейсом. Позволяет устанавливать как библиотеки (чужой код), так и готовые программы, в том числе специализированные биоинформатические.

В питоне есть встроенный менеджер пакетов pip, который обладает похожим, но несколько урезаннымв сравнении с Anaconda функционалом. Автор рекомендует её использовать только при отсутствии пакета на Anaconda.

## Среды разработки

Писать код можно и в обычном блокноте Windows, но делать это на постоянной основе не рекомендую. Существуют специальные программы, которые имеют ряд функций, упрощающих программисту жизнь. Такие программы называют интегрирыванными средами разработки (Integrated Development Environment, IDE). Примеры:

1.  PyCharm (очень удобная, но поддерживают антироссийские санкции)
2.  Microsoft VS Code
3.  Spyder

Они обеспечивают такие полезные функции как автоотступы (крайне полезная вещь в питоне), подсветку синтаксиса, автодополнение, интеграцию с Anaconda, запуск и отладку кода, интеграцию с системой контроля версий и многое другое.

## Инструкция по установке

Для наших практикумов мы будем использовать следующие программы:

1.  Miniconda - урезанная версия Anaconda, без плохо работающего графического интерфейса
2.  Jupyter Lab - IDE для удобного пошагового написания и запуска небольших блоков кода
3.  Microsoft VS Code - IDE для написания полноценных программ

Приведенная инструкция относится к операционной системе Windows. Описание для других операционных систем приводится также на сайтах приведенных программ.

1.  Скачаем Miniconda. Чтобы избежать возни с регистрацией на сайте, откройте Windows PowerShell и выполните следующую команду. Файл сохранится в папке Загрузки

    ``` powershell
    wget "https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe" -outfile ".\Downloads\Miniconda3-latest-Windows-x86_64.exe"
    ```

2.  Запустите файл установочника. Согласитесь с лицензионными настройками и оставьте настройки по умолчанию.

    ::: callout-important
    ## Внимание

    Проследите, чтобы в пути установки не было символов кириллицы. Это может порождать трудноотслеживаемые проблемы.
    :::

3.  Откройте программу Anaconda Prompt, её можно найти в поиске рядом с кнопкой Пуск. Вид окна представлен на @fig-prompt.

    ![Окно Anaconda Prompt](images/3_prompt.png){#fig-prompt}

    В скобках имя текущего активного окружения, затем идет путь до текущей рабочей папки и курсор ожидающий ввода наших команд

4.  Создадим новое окружение

    ``` bash
    conda create -n first_env -c conda-forge jupyterlab
    ```

    Команда для создания окружения - conda create. Затем идут параметры в формате "-имя_параметра значение", после перечень необходимых к установке программ и/или библиотек. Сейчас мы создаем окружение с программой Jupyter Lab

    -n - имя окружения, -с - источник, где искать и откуда скачивать. Библиотеки и программы находятся в специальных репозиториях - каналах (channels). Достаточно указать имя канала.

5.  Установим программу Microsoft VS Code, скачав установочник [с официального сайта](https://code.visualstudio.com/download) и оставив параметры по умолчанию.

6.  После создания окружения, его нужно активировать.

    ``` bash
    conda activate first_env
    ```

7.  Запустите Microsoft VS Code через Anaconda Prompt

    ``` bash
    code
    ```

8.  Установите плагины для работы. Нажмите клавиши Ctrl+Shift+X и откроется слева специальное меню. Установите Python и Jupyter.

9.  Создайте первый файл под названием hello_world.ipynb. В создавшемся окне создайте исполняемую ячейку, нажав кнопку Code+

## Первый написанный код

1.  Существуют ряд встроенных функций. Самая простая из них - вывод сообщения на экран. Давайте поздороваемся с этим миром.

    ```{python}
    print("Привет, мир!")
    ```

2.  У питона есть своя философия. Выполните код ниже, ознакомьтесь с выводом и старайтесь следовать этим правилам.

    ```{python}
    import this
    ```

## Подведение итогов

1.  Для разработки с использованием языков программирования требуются специализированные инструменты
2.  Их установка и использование нестрашная, но не тривиальная вещь.
3.  Мы написали первые программы на языке питон.