# Базовые структуры данных в Python

## Структуры данных

Одна переменная может характеризовать всего лишь 1 параметр 1 части какой-либо системы. В простых случаях часто это бывает более чем достаточно. По мере усложнения задач, вы столкнетесь с появлением переменного числа однотипных параметров, значений, результатов. Вы не сможете под каждый определить отдельную переменную. Вам потребуется группировать ваши параметры или результаты по смыслу, потому что так вам будет проще ими управлять. Таким образом, вы придете к понятию структур данных. Самые базовые структуры данных встроены в питон. Это список, кортеж, множество и словарь.

### Списки (list)

Список - массив однотипных данных переменной длины. Это самая частая используемая структура данных благодаря своей гибкости. Представьте большую коробку с пронумерованными ячейками. Ячейке этой коробки вы можете присвоить какое-либо значение. Номер ячейки называется индексом. Номерация (индексация) в питон начинается с 0. Давайте создадим список.

``` python
example_list = [1,2,4,6,7] # <1>
empty_list = [] # <2>
print(example_list[2]) # <3>
```

1.  Простой список из пяти элементов. Элементы перечисляются через запятую внутри квадратных скобок
2.  Список может быть пустым
3.  Мы можем получить элемент списка, обратясь к нему по индексу в квадратных скобках. В этом примере выведется третий элемент - 4.

Для каждого списка определены функции, которые позволяют манипулировать им. Они "хранятся" внутри списка. Обращение к ним выглядит следующим образом: имя_списка.имя_функции(). Список, как и любая сущность в питоне, это объект. У объекта есть некоторое внутреннее содержимое и, чтобы получить к нему доступ нужно через имя объекта обратиться к имени нужного содержимого через символ точки.

Рассмотрим операции, которые можно совершать над списком.

``` python
example_list.append(13) # <1>
example_list.remove() # <2>
del example_list[1]
example_list.index()
example_list.pop()
example_list.push()
len(example_list)
```

Заполнить список можно с помощью цикла, но в питоне для этого есть более изящный и оптимизированный способ - включения (comprehensions). Синтаксис включений не очень очевиден для новичка и годится только для простых операций в одно действие или с условием, где в каждой ветке не более одного действия: имя\_списка = [действие(i) for i in некоторый\_генератор if условие1 else действие\_2 ]. Наличие условия в включении является необязательным.

### Кортежи (tuple)

### Множества (set)

### Словари (dict)

## Разбор задач

## Подведение итогов

## Задачи

1.  Дано число. Проверьте, четное оно или нет.
2.  Даны два слова. Проверьте, что первые буквы этих слов совпадают.
3.  Дано слово. Получите его последнюю букву. Если слово заканчивается на мягкий знак, то получите предпоследнюю букву.
4.  Дано число. Выведите в консоль сумму первой и последней цифры этого числа.
5.  Даны два числа. Проверьте, что первые цифры этих чисел совпадают.
6.  Дана строка. Выведите её на экран посимвольно.
7.  Дана некоторая строка: 'abcdeabc' . Очистите ее от повторов символов:
8.  Организуйте ввод чисел с клавиатуры, пока не будет введен 0. Сохраняйте числа в список. Если в получившемся списке есть отрицательные числа, поменяйте знак каждого числа
9.  Дан некоторый список, например, вот такой: \[1, 2, 3, 4, 5, 6\]. Поделите сумму элементов, стоящих на четных позициях, на сумму элементов, стоящих на нечетных позициях.
10. Дан список со строками. Оставьте в этом списке только те строки, которые начинаются на http://