# Базовые структуры данных в Python

## Структуры данных

Одна переменная может характеризовать всего лишь 1 параметр 1 части какой-либо системы. В простых случаях часто это бывает более чем достаточно. По мере усложнения задач, вы столкнетесь с появлением переменного числа однотипных параметров, значений, результатов. Вы не сможете под каждый определить отдельную переменную. Вам потребуется группировать ваши параметры или результаты по смыслу, потому что так вам будет проще ими управлять. Таким образом, вы придете к понятию структур данных. Самые базовые структуры данных встроены в питон. Это список, кортеж, множество и словарь.

### Списки (list)

Список - массив однотипных данных переменной длины. Это самая частая используемая структура данных благодаря своей гибкости. Представьте большую коробку с пронумерованными ячейками. Ячейке этой коробки вы можете присвоить какое-либо значение. Номер ячейки называется индексом. Нумерация (индексация) в питон начинается с 0. Давайте создадим список. Выбор элементов по индексу в списках работает точно также, как выбор подстрок в строках.

``` python
example_list = [1,2,4,6,7] # <1>
empty_list = [] # <2>
print(example_list[2]) # <3>
```

1.  Простой список из пяти элементов. Элементы перечисляются через запятую внутри квадратных скобок
2.  Список может быть пустым
3.  Мы можем получить элемент списка, обратясь к нему по индексу в квадратных скобках. В этом примере выведется третий элемент - 4.

Для каждого списка определены функции, которые позволяют манипулировать им. Они "хранятся" внутри списка. Обращение к ним выглядит следующим образом: имя_списка.имя_функции(). Список, как и любая сущность в питоне, это объект. У объекта есть некоторое внутреннее содержимое и, чтобы получить к нему доступ нужно через имя объекта обратиться к имени нужного содержимого через символ точки.

Рассмотрим операции, которые можно совершать над списком.

``` python
example_list.append(13) # <1>
example_list.remove() # <2>
del example_list[1] # <3>
example_list.index() # <4>
example_list.insert(3, 22) # <5>
example_list.sort() # <6>
len(example_list) # <7>
22 in example_list # <8>
```

1.  Добавить в конец списка значение
2.  Удалить из списка эелемент по значению
3.  Удалить из списка элемент по положению
4.  Найти элемент в списке, сгенерирует ошибку ValueError, если элемент не найден
5.  Вставит число 22 на 4 позицию списка
6.  Отсортирует список - функция изменяет сам список и ничего не возвращает
7.  Получить количество элементов в списке
8.  Проверить наличие элемента в списке

Заполнить список можно с помощью цикла, но в питоне для этого есть более изящный и оптимизированный способ - включения (comprehensions). Синтаксис включений не очень очевиден для новичка и годится только для простых операций в одно действие или с условием, где в каждой ветке не более одного действия: *имя_списка = \[действие(i) for i in некоторый_генератор if условие1 else действие_2 \]*. Наличие условия в включении является необязательным.

Пример создания списка нечетных чисел

``` python
odd_numbers = [i for i in range(1,20,2)]
# Или
odd_numbers = [i for i in range(20) if i % 2 == 1]
```

### Кортежи (tuple)

Кортежи, как и списки, являются последовательностями произвольных элементов. В отличие от списков кортежи неизменяемы. Это означает, что вы не можете добавить, удалить или изменить элементы кортежа после того, как определите его. Поэтому кортеж аналогичен константному списку.

``` python
example_tuple = (4,6,9,12) # <1>
a,b,c,d = example_tuple # <2>
```

1.  Создание кортежа
2.  Операция распаковки кортежа по отдельным переменным

Вы можете использовать кортежи вместо списков, но они имеют меньше возможностей — у них нет функций append(), insert() и т.д., поскольку кортеж не может быть изменен после создания. Почему же не применять везде списки вместо кортежей?

-   Кортежи занимают меньше места.

-   Вы не сможете уничтожить элементы кортежа по ошибке.

-   Вы можете использовать кортежи как ключи словаря

-   Именованные кортежи могут служить более простой альтернативой объектам.

-   Аргументы функции передаются как кортежи

### Словари (dict)

Словарь очень похож на список, но порядок элементов в нем не имеет значения, и они выбираются не с помощью смещения. Вместо этого для каждого значения вы указываете связанный с ним уникальный ***ключ***. Таким ключом в основном служит строка, но он может быть объектом одного из неизменяемых типов: булевой переменной, целым числом, числом с плавающей точкой, кортежем, строкой и другими объектами, которые вы увидите далее. Словари можно изменять, что означает, что вы можете добавить, удалить и изменить их элементы, которые имеют вид ***«ключ-значение»***.

::: callout-note
В других языках программирования словари могут называться ассоциативными массивами, хешами или хеш-таблицей. В Python словарь также называется dict для экономии места.
:::

``` python
example_dict = {"мама": 4, "яблоко":6, "Python":6} # <1>
del example_dict["Python"] # <2>
'яблоко' in example_dict # <3>
example_dict["карта"] = len("карта") # <4>

for k in example_dict.keys(): # <5>
    print(k)

for v in example_dict.values(): # <6>
    print(v)

for k,v in example_dict.items(): # <7>
    print(f"{k}:{v}")
```

1.  Создание словаря. Пары "ключ-значение" записаны в фигурных скобках через запятую. Синтаксис записи пары- ***ключ***:***значение***
2.  Удаление элемента из словаря по ключу
3.  Проверка наличия ключа в словаре
4.  Добавление новой записи с новым ключом в словарь. Если в словаре уже есть значение с этим ключом, то оно будет перезаписано.
5.  Перебор всех ключей словаря
6.  Перебор всех значений словаря.
7.  Перебор одновременно и ключей, и значений. items возвращает кортеж из ключа и значения, который распаковывается в переменные k и v.

### Множества (set)

Множество похоже на словарь, значения которого опущены. Он имеет только ключи. Как и в случае со словарем, ключи должны быть уникальны. Если вам нужно прикрепить к ключу некую информацию, воспользуйтесь словарем. Предположим, вы хотите объединить два множества, которые содержат несколько общих ключей. Поскольку множество должно содержать только уникаль ные значения, объединение двух множеств будет содержать лишь одно включение каждого ключа. Пустое множество — это множество, содержащее ноль элементов. Операции над множествами показаны на @fig-sets и @lst-sets.

![Визуализация операций над множествами с помощью кругов Эйлера](images/6_sets.PNG){#fig-sets}

``` {#lst-sets .python lst-cap="Реализация основных операций над множествами в Python"}
set_a = {5,3,6,123,657,12,4} # <1>
set_b = {5,3,6,10,60,18,4} # <1>
6 in set_a # <2>
a & b # <3>
a.intersection(b)# <3>
a | b # <4>
a.union(b)# <5>
a — b # <5>
a.difference(b)# <5>
a ^ b # <6>
a.symmetric_difference(b) # <6>
a <= b # <7>
a.issubset(b) # <7>
a >= b # <8> 
a.issuperset(b)# <8>
```

1.  Создание множества
2.  Проверка наличия элемента в множестве
3.  Пересечение множеств
4.  Объединение множеств
5.  Разность множеств
6.  Симметричная разность множеств
7.  Проверка на подмножество
8.  Проверка на супермножество (множество множеств)

## Разбор задач

Дан словарь:

{ 'a': 1, 'b': 2, 'c': 3, 'd': 4 }

Найдите сумму элементов этого словаря.

```{python}
input_dict = {'a':1, 'b':2, 'c':3, 'd':4}
s = 0
# input_dict.values() генератор значений словаря. Генератор это специальный тип функций, 
# который вместо того, чтобы возвращать весь список значений, возвращает их по одному. Важно для экономии памяти.
for value in input_dict.values():
    s += value
print(s)
```

Дан список со строками. Оставьте в этом списке только те строки, которые начинаются на http://

```{python}
input_list = ["kar", "meow", "https://rsmu.ru", "bioinf", "http://yandex.ru", "Russia"]
#f-строки позваляют с помощью простой нотации вставлять в исходную строку значение переменной или 
# какого-либо выражения внутри фигурных скобок
print(f"Исходный список {input_list}")
# Изменять исходный список - плохая идея, поэтому сделаем копию. Помним, что список - ссылочный тип.
result_list = input_list.copy()
for item in input_list:
    if not item.startswith("http://"):
        result_list.remove(item)
print(f"Осталось {result_list}")
```

Дан некоторый список, например, вот такой:

\[1, 2, 3, 4, 5, 6\]

Поделите сумму элементов, стоящих на четных позициях, на сумму элементов, стоящих на нечетных позициях.

```{python}
input_list = [1,2,3,4,5,6,7,8,9,10,11,12]
sum_odd_pos = 0
sum_even_pos = 0
# enumerate возвращает генератор (позиция элемента, значение элемента)
# i,v = tuple распаковка элементов кортежа по отдельным переменным
for i, value in enumerate(input_list):
    if i % 2 == 0:
        sum_even_pos += value
    else:
        sum_odd_pos += value
        
print(sum_even_pos / sum_odd_pos)
```

Более короткое решение

```{python}
sum_odd_pos = sum(input_list[0:len(input_list):2]) 
sum_even_pos = sum(input_list[1:len(input_list):2])
sum_odd_pos / sum_even_pos
```

## Подведение итогов

1.  Для написания кода потребуются структуры данных, которые могут хранить примитивные переменные по определенному принципу: списки, кортежи, словари, множества
    1.  Список - изменяемый массив. К элементам массива можно обращаться по индексу, можно удалять, добавлять и искать элементы
    2.  Кортеж - неизменяемый массив. Незаменим в некоторых ситуациях. Чаще используется список
    3.  Словарь - хранит пары ключ-значение. Ключи уникальны, значения нет
    4.  Множества - неупорядоченный массив уникальных значений.

## Задачи

1.  Дано число. Проверьте, четное оно или нет.
2.  Даны два слова. Проверьте, что первые буквы этих слов совпадают.
3.  Дано слово. Получите его последнюю букву. Если слово заканчивается на мягкий знак, то получите предпоследнюю букву.
4.  Дано число. Выведите в консоль сумму первой и последней цифры этого числа.
5.  Даны два числа. Проверьте, что первые цифры этих чисел совпадают.
6.  Дана строка. Выведите её на экран посимвольно.
7.  Дана некоторая строка: 'abcdeabc' . Очистите ее от повторов символов:
8.  Организуйте ввод чисел с клавиатуры, пока не будет введен 0. Сохраняйте числа в список. Если в получившемся списке есть отрицательные числа, поменяйте знак каждого числа
9.  Дан некоторый список, например, вот такой: \[1, 2, 3, 4, 5, 6\]. Поделите сумму элементов, стоящих на четных позициях, на сумму элементов, стоящих на нечетных позициях.
10. Дан список со строками. Оставьте в этом списке только те строки, которые начинаются на http://