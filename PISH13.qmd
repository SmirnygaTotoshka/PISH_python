# Pandas

## Введение

Pandas - библиотека для языка программирования Python для работы с табличными данными. Это мощный инструмент в арсенале аналитика данных, так как она может работать с большинством современных форматов данных, представляя их в виде таблицы. Pandas владеет большим функционалом работы с таблицами и позволяет делать с ними всё что угодно: чтение, запись, фильтрацию, математические операции, расчет статистики, визуализацию данных и многое другое. Библиотека имеет исчерпывающую документацию и собственные обучающие материалы на своём [официальном сайте](https://pandas.pydata.org/).

Основный тип данных, используемый в этой библиотеке - датафрейм (DataFrame). Визуальная схема представления этого типа данных представлена на @fig-dataframe. Датафрейм - двумерная таблица, состоящая из строк и столбцов. Столбцы имеют свои названия (columns) и строки имеют свои названия (index).

![Визуальное представление датафрейма pandas](images/13_table_dataframe.svg){#fig-dataframe}

Каждый столбец представляеют собой серию (Series). Визуальная схема представления этого типа данных представлена на @fig-series. Серия не имеет имени столбцов, но имеет имена строк (индексы) и может иметь собственное имя. Серии являются надстройкой над numpy.array, поэтому сохранили ряд атрибутов от него: например общий тип данных (dtype).

![Визуальное представление серии](images/13_table_series.svg){#fig-series}

## Предварительная настройка

Установить библиотеку pandas можно как через окружение conda,

``` bash
conda install -c conda-forge pandas openpyxl #openpyxl зависимость для работы с Excel
```

так и через менеджер пакетов pip

``` bash
pip install pandas
```

Чтобы начать работу с этой библиотекой, необходимо её импортировать.

```{python}
import pandas as pd
```

::: callout-note
pd - это общепринятый псевдоним библиотеки
:::

## Чтение и запись файлов

Для дальнейшей работы скачаем пример таблицы. Данные о пассажирах Титаника являются классическим примером в обучающих материалах по анализу данных и машинному обучению. Данные необходимо скопировать, перейдя [по ссылке](https://raw.githubusercontent.com/pandas-dev/pandas/main/doc/data/titanic.csv), в Excel и сохранить в формате csv.

.csv - comma-separated values - формат файлов, где значения в разных столбцах разделены друг от друга запятой. На самом деле разделителем может быть любой символ, но общепринятые это запятая, точка с запятой или табуляция.

Библиотека pandas может работать с большим количеством форматов и чтобы прочитать их, она содержит функции, чье имя подчинено формату **read\_\*,** где вместо звездочки имя формата. Эти функции лежат вне класса в самом модуле и возвращают объект DataFrame. Чтобы убедиться в правильности считывания, вызовем функцию head класса DataFrame. Она возвращает первые n строк таблицы.

```{python}
titanic = pd.read_csv("data/titanic.csv", sep = ",")
titanic.head()
```

Pandas может сохранит датафрейм в любой формат, с которым умеет работать. Для этого существуют функции, чье имя подчинено формату **to\_\*,** где вместо звездочки имя формата. Общая схема работы представлена на @fig-pandas_io.

```{python}
# нужна библиотека openpyxl
titanic.to_excel("data/titanic.xlsx", sheet_name="passengers", index=False)
# sheet_name - имя листа книги Excel
# index - Флаг, сохранять ли индекс датафрейма. Часто это не нужно
```

![Схема работы чтения и записи в pandas](images/13_io_readwrite.svg){#fig-pandas_io}

## Фильтрация

### Выбор определенных колонок

![Схема выбора отдельных столбцов](images/13_subset_columns.svg){#fig-subset_columns}

Схема манипуляции представлена на @fig-subset_columns. Индексация по строкам и столбцам в датафрейме осуществляется с помощью квадратных скобок. Чтобы выбрать отдельный столбец, достаточно указать его имя.

```{python}
ages = titanic["Age"]
```

Один столбец - это серия.

```{python}
type(titanic["Age"])

```

Объекты pandas как и массивы numpy содержат в себе атрибут формы

```{python}
titanic["Age"].shape
```

Чтобы выбрать несколько столбцов, необходимо передать список их имён.

```{python}
age_sex = titanic[["Age", "Sex"]]
age_sex.head()
```

Тогда возвращаемый тип уже будет датафреймом.

```{python}
type(titanic[["Age", "Sex"]])
```

### Выбор определенных строк

![Схема фильтрации определенных строк](images/13_subset_rows.svg){#fig-filt_rows}

Схема фильтрации строк показана на @fig-filt_rows. pandas поддерживает логическую индексацию. Следовательно, вместо передачи номеров конкретных строк, мы можем фильтровать их по условию. Например, нам нужны все пассажиры старше 35 лет.

```{python}
above_35 = titanic[titanic["Age"] > 35]
```

Операция сравнения является векторизированной, поэтому Выражение `titanic["Age"] > 35`серию чисел с возрастом превращает в серию логических значений. Таким образом, остаются только те строки, где значение равно True. pandas поддерживает все обычные операции сравнения.

```{python}
titanic["Age"] > 35
```

Чтобы составить сложные логические высказывания, нужно воспользоваться специальными переопределенными операциями (переопределены битовые операции).

-   & - конъюнкция

-   \| - дизъюнкция

-   \~ - инверсия

```{python}
class_23 = titanic[(titanic["Pclass"] == 2) | (titanic["Pclass"] == 3)]
class_23.head()
```

Особые случаи из себя представляют проверка на наличие в списке и проверка на пропущенное значение. Для них существуют специальные функции isin() и notna(). Предыдущий пример можно переписать более изящно.

```{python}
class_23 = titanic[titanic["Pclass"].isin([2, 3])]
class_23.head()
```

Оставить только строки с непропущенными значениями можно с помощью функции notna()

```{python}
age_no_na = titanic[titanic["Age"].notna()]
age_no_na.shape
```

## Соединяем операции вместе

![Схема фильтрации строк и столбцов совместно](images/13_subset_columns_rows.svg){#fig-filt_row_col}

Схема совместной фильтрации строк и столбцов показана на @fig-filt_row_col. Для неё исть два класса функций локализации loc и iloc. Функция iloc работает исключительно с порядковыми номерами строк **и** столбцов. Если хотя бы для строк и для столбцов используется имя или условие, необходимо использовать функцию loc.

```{python}
# имена взрослых
adult_names = titanic.loc[titanic["Age"] > 35, "Name"]
adult_names.head()
```

Выбор строк с 10 по 25 и с 3 по 6 колонку

```{python}
titanic.iloc[9:25, 2:5]
```

## Подведение итогов

1.  pandas - библиотека для работы с таблицами

2.  Она может читать практически любой формат данных и сохранять в практически любом формате.

3.  pandas позволяет проводить гибкие операции фильтрации по именам, индексам, условиям.

## Задание

Попробуйте применить полученные знания для работы с собственными таблицами (не важно, научные или житейские).