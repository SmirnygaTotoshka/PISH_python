# Matplotlib

## Введение

В анализе данных крайне важный этап эта их визуализация. Визуальный анализ может многое рассказать о данных, чего не расскажут самые хитрые метрики. Занимательный пример, иллюстрирующий данный тезис, был придуман английским математиком Ф. Энскомбом. Он придумал 4 набора данных, которые имеют одни и те же значения основных описательных статистик, но совершенно по-разному устроенных. Более подробно вы можете прочитать об этом [здесь](https://ru.wikipedia.org/wiki/%D0%9A%D0%B2%D0%B0%D1%80%D1%82%D0%B5%D1%82_%D0%AD%D0%BD%D1%81%D0%BA%D0%BE%D0%BC%D0%B1%D0%B0). Базовый пакет для визуализации в Python - Matplotlib. Библиотека имеет исчерпывающую документацию и собственные обучающие материалы на своём [официальном сайте](https://matplotlib.org/stable/). С ней сложно строить комплексные графики, состоящих из нескольких типов графиков, но на нем основываются другие пакеты, которые призваны облегчить эту задачу. Например, библиотека seaborn, которая содержит matplotlib и работает с ним в связке, содержит некоторый набор комплексных визуализзаций и приспособлена для с работы с pandas. matplotlib также легко устанавливается через conda,

``` bash
conda install -c conda-forge matplotlib
```

так и через pip.

``` bash
pip install matplotlib
```

Чтобы проверить корректность установки, выполните следующий код.

``` python
import matplotlib
print(matplotlib.__version__)
```

## Анатомия графика

Основные элементы графика представлены на @fig-image_anatomy.

![Анатомия графика. Взято из официальных обучающих материалов](images/14_anatomy.webp){#fig-image_anatomy}

Полотно, на котором размещаются элементы графика, называется figure. На нем может быть от 0 до большого количество подсюжетов (subplots). Сюжет это то, что мы обычно подразумеваем под графиком, т.е. некоторой совокупности кривых в некоторой координатной сетке. У каждого сюжета есть заголовок (title) и оси (axes). Оси - основные объекты для управления сюжетом. С их помощью мы наносим на график данные, которые могут быть в виде линий, точек (markers) или геометрических фигур. Оси имеют подписи (labels), значения на осях (ticks), которые задают основную цену деления (major ticks) и малую цену деления (minor ticks). График может иметь сетку (grid) и легенду (legend), повествующую об изображенных данных. Все элементы управления графиком расположены в подмодуле pyplot, поэтому часто импортируют только его под псевдонимом plt.

## Виды графиков

Для визуализации разных типов данных используют разные графики. У matplotlib на офицальном сайте есть [галерея графиков](https://matplotlib.org/stable/gallery/index.html) с примерами кода. Для начала разговора о видах графиков определим типы данных с точки зрения их анализа.

```{mermaid}
flowchart TB
    A["Данные"] -> B["Количественные"]
    A["Данные"] -> C["Категориальные"]
    B["Количественные"] -> D["Дискретные"]
    B["Количественные"] -> E["Непрерывные"]
    C["Категориальные"] -> F["Порядковые"]
    C["Категориальные"] -> G["Номинальные"]
```

Кроме типа данных необходимо понимать цель - что мы хотим им показать и количество переменных. Основные цели - показать распределение, зависимость, соотношения. Для визуализации распределений количественных переменных можно использовать гистограммы @fig-histogram, графики плотности (сглаженная гистограмма), "ящики с усами" (boxplots) @fig-boxplot, violin plot @fig-violinplot. Для визуализации распределения категориальных величин, их соотношения между друг другом можно использовать столбчатые (barplot) @fig-barplot или круговые (pieplot) диаграммы @fig-pieplot. Для отображения зависимостей между двумя количественными переменными используют диаграмму рассеяния (scatter plot) @fig-scatterplot. Для визуализации зависимости количественной величины от двух категориальных применяют тепловую карту (heatmap) @fig-heatmap.

![Пример простой гистограммы](images/14_histogram.png){#fig-histogram}

![Пример простого "ящика с усами"](images/14_boxplot.png){#fig-boxplot}

![Пример простой диаграммы виолончели](images/14_violinplot.png){#fig-violinplot}

![Пример простой столбчатой диаграммы](images/14_barplot.png){#fig-barplot}

![Пример простой круговой диаграммы](images/14_pieplot.png){#fig-pieplot}

![Пример простой диаграммы рассеяния](images/14_scatterplot.png){#fig-scatterplot}

![Пример простой тепловой карты](images/14_heatmap.png){#fig-heatmap}

Тип данных, количество переменных, цель графика определяется автором исходя из здравого смысла и вкуса. Это нельзя определять автоматически. Важно помнить, что хоть изначально график может иметь одну, две или три оси, то слоев повествования он может иметь гораздо больше. Дополнительную смысловую нагрузку можно превносить с помощью цвета, типа точек или линий, сочетания нескольки х видов графика на одном, дополнительными треками и другими параметрами, изложенными в документации. Такой график можно нарисовать один раз в графическом редакторе, но это очень долго и менять что-то в нем будет очень мучительно, поэтому визуализация по данным с помощью кода выигрывает. Такой график строится быстро и построит правильный график для любых одинаково устроенных данных, т.е. написанный код можно использовать много раз.

## Примеры построения

Для начала разберем простой школьный пример - построения графика синуса аргумента на одном периоде.

```{python}
import matplotlib.pyplot as plt # <1>
import numpy as np

x = np.linspace(0, 2 * np.pi, 100) # <2>
y = np.sin(x) 

fig, ax = plt.subplots() # <3>
ax.plot(x, y, color = "red", marker = "o") # <4>
plt.show() # <5>
```

1.  Импортируем модуль для рисования
2.  Генерируем данные: у нас две количественные переменные. Воспользуемся библиотекой numpy для генерации и построим диаграмму рассеяния.
3.  Создаем рисунок. Метод subplots по умолчанию возращает рисунок и объекты осей - их будет несколько если рисунок содержит несколько сюжетов. Количество сюжетов и их физический размер задается параметрами метода subplots
4.  Добавляем на оси наши данные: x и y. Указываем, что данные будут отображаться в виде красных точек.
5.  Отобразить график

Построим другой тип графиков - возьмем данные с прошлого занятия и визуализируем соотношение выживших к погибшим. Это категориальная переменная, поэтому построим столбчатую диаграмму.

```{python}
import matplotlib.pyplot as plt # <1>
import pandas as pd
data = pd.read_csv("data/titanic.csv")

plt.style.use('default') # <2>

# make data:
counts = data["Survived"].value_counts(dropna = False)
x = counts.index
y = counts

# plot
fig, ax = plt.subplots()

ax.bar(x, y, width=0.5, color=["red","green"], linewidth=0.7, tick_label = ["Погибший","Выживший"]) # <3>
ax.set_title("Статус пассажира") # <4>
ax.set(xticks=[0,1]) # <5>

plt.show()
```

1.  Импортируем модуль для рисования
2.  Библиотека имеет несколько стилей для рисования. Здесь используем по умолчанию. Ознакомиться с стилями можно [здесь](https://matplotlib.org/stable/gallery/style_sheets/style_sheets_reference.html).
3.  Добавляем столбики на оси, изменяем их цвет в соответствии с человеческой логикой: зеленый - выжил, хорошо; красный - умер, плохо. Также меняем на понятные нам подписи к тикам.
4.  Изменяем заголовок сюжета
5.  Убираем лишние тики, оставляем только нужные нам.

Здесь мы с помощью цветов сделали наш график интуитивно легче читаемым.

Следующий примером мы хотим понять сопоставимость методов измерения концентрации интерлейкина-6. Концентрации интерлейкина-6 были измеряны в выборке образцов плазмы крови больных COVID-19 и контрольных образцов. В идеале все точки должны лежать на диагонали. Кроме того, нанесем слой информации о том, к какой группе по степени тяжести заболевания относится образец.

```{python}
import matplotlib.pyplot as plt # <1>
import pandas as pd

elisa_data = pd.read_excel(r"data/results_xmap_and_vector.xlsx")

death = elisa_data.loc[elisa_data["Outcome"] == "смерть", :] # <1>
severe = elisa_data.loc[elisa_data["Outcome"] == "тяжелый", :]
moderate = elisa_data.loc[elisa_data["Outcome"] == "средний", :]
control = elisa_data.loc[elisa_data["Outcome"] == "здоровый", :]


fig, ax = plt.subplots(figsize = (8,6)) # <2>
ax.scatter(x = "ELISA, pg/ml", y = "xMAP, pg/ml", data = death) # <3>
ax.scatter(x = "ELISA, pg/ml", y = "xMAP, pg/ml", data = severe)
ax.scatter(x = "ELISA, pg/ml", y = "xMAP, pg/ml", data = moderate)
ax.scatter(x = "ELISA, pg/ml", y = "xMAP, pg/ml", data = control)
ax.set_xlabel("ELISA, pg/ml") # <4>
ax.set_ylabel("xMAP, pg/ml")
ax.set_title("IL-6 in human plasma")
ax.legend(labels = ["смерть","тяжелый","средний","здоровый"]) # <5>
fig.tight_layout() # <6>
fig.savefig("images/example.png") # <7>
plt.show()
```

1.  Разобьем наши данные на отдельные таблицы по группам
2.  Создадим рисунок. Параметр figsize задает размер рисунка. По умолчанию, в дюймах.
3.  Нанесем наши данные на оси. В качестве группирующих параметров (например, цвет) и данных можно указывать названия столбцов. Для этого необходимо задать параметр data равным вашему датафрейму.
4.  Изменим подписи к осям. Не забываем про размерности данных!
5.  Наносим на график легенду, поясняющую, какой цвет отвечает за какую группу.
6.  Специальная функция, приводящая в соответствие размеры элементов графика к размеру рисунка.
7.  Сохраняем график в файл.

## Подведение итогов

1.  Строить графики лучше с помощью кода на Python, так как это быстрее, качественнее и воспроизводимее
2.  Python располагает большим количеством средств для визуалзиации. Базовая библиотека - matplotlib.

## Упражнение

Возьмите датасет о пассажирах Титаника с прошлого занятия и постройте следующие три графика

1.  Распределение по возрасту и полу (т.е. ожидается 2 гистограммы возраста на одном графике)

2.  Соотношение выживших/погибших в зависимости от класса билета

3.  Зависимость цены билета от возраста. Дополнительным слоем (цветом или типом маркера) нанесите порт посадки.