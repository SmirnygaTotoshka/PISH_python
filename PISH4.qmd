# Базовые конструкции языка Python

## Переменные

Одна из самых основных концепций программирования это переменные. Переменные - поименнованные логические ячейки памяти. Помним, что программа - это алгоритм работы с нашими данные. Так вот, переменные это и есть наши данные. Часто разные авторы любят проводить аналогию, что переменные это некоторые коробки, которые имеют ярлыки с подписями. Переменная имеет имя и значение. Пользуясь этим знанием, создадим переменную.

```{python}
lucky_number = 9
```

Синтаксис очень простой: имя_переменной = значение. Символ '=' называется оператором присваивания. Разберем, какие быввают имена и какие бывают значения

### Имена

Имена могут состоять из любой последовательности символов из алфавита латинских букв, цифр и символа нижнего подчеркивания, хотя есть некоторые ограничения.

1.  Имя не должно начинаться с цифры

2.  Имя не должно быть зарезервированным словом

Зарезервированные слова - специальные конструкции для обозначения элементов синтаксиса. Полный их перечень можно посмотреть в [литературе](https://www.geeksforgeeks.org/python-keywords-and-identifiers/).

Примеры подходящих имен:

``` python
cat = 6
meow_meow = "meow"
_dog = False
```

Примеры неправильных имен:

``` python
# строки, начинающиеся с решетки, это комментарии
# они игнорируются интерпретатором и служат подсказками для программистов
# старайтесь писать комментарии!

56ghf = False # имя начинается с цифры
True = 1 # имя зарезервированное слово
dfdf$qw@ = 1 #Содержит недопустимые символы
```

Имена в Python регистрозависимы, т.е. имена cat и Cat это разные имена.

::: callout-important
## Важно

Старайтесь давать осмысленные имена! Помните, программист прежде всего читатель, а не писатель, и он должен понимать, что лежит в какой переменной и для чего она нужна.
:::

Существуют несколько нотаций (соглашений) о написании имён. В Python чаще всего используются змеиная нотация: имена переменных пишут с маленькой буквы, разделяя слова знаком нижнего подчеркивания (snake_case).

### Типы переменных

Кроме имени переменной важно её значение. Python язык с динамической типизацией, т.е. тип переменной определяется по присваемому значению в момент присваивания. Если мы существующей переменной, присвоим значение другого типа, она изменит свой тип автоматически.

| Тип переменной | Пример    |
|----------------|-----------|
| int            | a = 5     |
| float          | a = 5.5   |
| str            | a = "5.5" |
| bool           | a = True  |

: Основные типы данных

Количество памяти, выделяемое на одну переменную, может отличаться от вида используемого интерпретатора: CPython (общепринятая), Jython, IronPython. К тому же, в зависимости от значения, интерпретатор может выделить автоматически необходимое количество памяти.

Переменные можно из одного типа приводить к другому. Такая операция называется операцией приведения типов (type cast). Правила преобразования типов:

1.  Любой тип можно преобразовать в строку
2.  Любой тип можно преобразовать в логический тип: 0 или пустая строка будет False, остальные значения будут True
3.  Строку можно преобразовать в число, если она представляет из себя число и не содержит посторонних символов.

```{python}
a = 5
type(a) # Проверка типа переменной
```

```{python}
b = str(a) # type cast, аналогичные операции int(), float(), bool()
type(b)
```

Кроме перечисленных типов существует специальное значение - None, которое обозначает пустоту, когда переменная не должна иметь какое-либо значение и тип.

## Функции

Другой важный концепт - функции. Так называют логически отделенную часть кода, имеющую имя и выполняющую определенные, заданные программистом операции. О том, как создавать функции поговорим на будущих занятиях. Сейчас важно знать, что у функции существует определение, где мы прописываем выполняемые операции, и вызовы, где мы выполняем эти операции. Функции призваны уменьшить дублирование кода, когда одним и тем же стандартным операциям присвоить имя.

Синтаксис вызова функции простой: имя_функции (значение_параметра1, значение_параметра2). Т.е. имя функции и в круглых скобках значения параметров функции - переменные внутри функции, от которых зависят выполняемые операции. Параметров может быть от 0 до очень большого неопределенного переменного количества. Вы уже вызывали встроенные функции print и type.

## Арифметические операции

Арифметические операции осуществляются над числами.

```{python}
a = 5
b = 7
a + b
```

Чтобы не потерять результат, сохраните его в переменную

```{python}
c = a + b
```

| Операция | Значение                     |
|----------|------------------------------|
| a + b    | Сложение                     |
| a - b    | Вычитание                    |
| a \* b   | Умножение                    |
| a / b    | Деление                      |
| a // b   | Деление нацело               |
| a % b    | Получение остатка от деления |
| a \*\* b | Возведение в степень         |

: Арифметические операции

Сложные трансцедентные операции содержаться в модуле math. Модулям у нас будет посвящено отдельное занятие. Сейчас важно знать, что модуль - это цельный код. который за вас написали другие программисты и которым можно воспользоваться, ***импортировав*** себе этот модуль.

```{python}
import math
print(math.sqrt(9)) # Имя_модуля.имя_функции(значение_параметра) - sqrt - square root - квадратный корень
```

::: callout-note
## Константы

В Python не существует понятие констант. Есть соглашение об именах: переменные, которые не должны изменяться должны называться целиком в верхнем регистре (капсом)

``` python
PI = 3.1416
```
:::

## Логические операции

Логические операции осуществляются над логическими переменными или логическими высказываниями. Логическое высказывание можно получить путем сравнения значений.

| Операция | Значение   |
|----------|------------|
| a and b  | Конъюнкция |
| a or b   | Дизъюнкция |
| not a    | Инверсия   |

: Логические операции

| Операция | Значение         |
|----------|------------------|
| a == b   | Равенство        |
| a != b   | Неравенство      |
| a \< b   | Строго меньше    |
| a \<= b  | Меньше или равно |
| a \> b   | Строго больше    |
| a \>= b  | Больше или равно |

: Операции сравнения

Пример

```{python}
a = 5
b = 6
c = a > 10 or b < 5
print(c)
```

Нельзя проверить на равенство или неравенство с None. Для проверки служит специальная конструкции is и is not.

```{python}
a = None
b = a is not None
print(b)
```

Приоритет операций как в математике и его можно изменять с помощью заключения выражения в скобки. Как в математике.

## Строки

Обратите внимание: для определения строки, её значения надо заключить в кавычки. Кавычки могут быть одинарными или двойными. Важно, чтобы значение обрамляли однотипные кавычки.

```{python}
a = "Hello world!" 
b = 'Привет, мир!' 
print(a) 
print(b)
```

Строки могут быть многострочными. Для этого надо значение заключить в три пары однотипных кавычек

```{python}
multiline = '''Привет. 
Я многострочная строка 
Как поживаешь? ''' 
print(multiline)
```

Строки можно объединять. Такая операция называется сложением строк или конкатенацией.

```{python}
s = "Привет" + " мир" 
print(s)
```

Строки можно умножать на число - тогда строка повторится заданное количество раз.

```{python}
s = "ХА"*10 
print(s)
```

Для строк существуют специальные символы, которые записываются с обратного слэша. Тогда 2 символа на печати интерпретируются как один особый, что может вносить сумятицу.

| Символ | Значение                       |
|--------|--------------------------------|
| "\\n"  | Перенос строки                 |
| "\\t"  | Табуляция (особый вид пробела) |
| "\\r"  | Возврат каретки                |
| "\\""  | Кавычка                        |
| "\\\\" | Обратный слэш                  |

: Специальные символы - escape-последовательности. В таблице далеко неполный список

Чтобы избежать коллизий, можно использовать r-строки. Они могут быть полезны для обозначения путей к файлам в Windows.

```{python}
asis_str = r"C:\Users\numbers" #\n не интерпертируется как символ переноса строки
```

Кроме r-строк существуют f-строки, которые позволяют удобно подставлять в строку значения переменных и выражений.

```{python}
square = 10
print(f"Площадь фигура равна {square}")
```

У строк можно выбирать подстроки. Нумерация начинается с 0. Позиции перечисляются в квадратных скобках. Индексация возможна в трех режимах.

-   \[start\] - выбирает 1 символ с позиции start

-   \[start:end\] - выбирает подстроку с позиции start до end, не включая end

-   \[start:end:step\] - выбирает подстроку с позиции start до end, не включая end, с шагом step

-   Возможна отрицательная индексация, тогда нумерация символов начинается с конца строки. -1 - последний символ строки.

    ::: callout-note
    ## Интервалы

    Python всегда работает с полуоткрытыми интервалами, чтобы при последовательной работе с ними не возникало пересечений.
    :::

```{python}
s = "Мама мыла раму."
print(s[0])
print(s[1:5])
print(s[0:7:2])
print(s[-2])
```

Для работы с переменными существуют ряд встроенных функций. Одна из таких - получение длины. В случае строки - количества символов в строке.

```{python}
print(len("Мама мыла раму."))
```

## Дополнительно

Можно вводить данные с клавиатуры. Для этого есть функция input. Она возращает **строку.** Если функция возвращает какое-то значение, следовательно, его можно записать в переменную.

``` python
a = input("Введите значение: ")# Параметр здесь для красоты - приглашение ввести значение
```

## Подведение итогов

1.  У переменных должно быть "говорящее" имя

2.  Тип переменной зависит от её значения

3.  В Python есть функционал для выполнения любых арифметических и логических операций.

4.  Строки бывают разные: однострочные, многострочные, r-строки, f-строки.

## Задание

Напишите программу, соверщающую следующие действия:

1.  принимает с клавиатуры 3 числа
2.  рассчитывает значение по формуле Герона $S = \sqrt{p(p-a)(p-b)(p-c)}, p = a + b +c$
3.  выводит на экран сполученное значение
4.  выводит, является ли оно чётным.