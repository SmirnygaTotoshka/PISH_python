# Логические основы работы компьютера

## Лирическое отступление

Логические операции необходимы компьютеру, чтобы он мог без прямого вмешательства человека определять, когда следует выполнять арифметические операции. Следовательно, мог выполнять некоторый алгоритм. Алгоритм - заранее заданное, понятное и точное предписание к совершению определенной последовательности действий, возможной для исполнителя, для получения решения задачи за конечное количество шагов. Компьютер совершает логические операции, следуя законам формальной логики - науки о правилах преобразования высказываний, сохраняющих их истинностное значение **безотносительно к содержанию** входящих в эти высказывания понятий, а также конструирование этих правил. Математическую основу формальной логики разработал в 19 веке английский математик Джордж Буль, в честь которого этот раздел математики назван булевой алгеброй.

## Основные понятия

Основной структурно-функциональной единицей в булевой алгебре является логическое высказывание. Логическое высказывание - утверждение относительно которого можно однозначно сказать истинно оно или ложно. Логическое высказывания состоит из субъекта (действующего лица), связки (есть, имеет, является) и предиката, по кторому определяется истинность или ложность высказывания.

::: callout-tip
## Подумайте

Какие из этих предложений являются логическими высказываниями?

1.  В холодильнике есть кусок мяса
2.  Ученик десятого класса
3.  У него голубые глаза?
:::

Высказывания бывают простыми и сложными. Сложное высказывание состоит из нескольких простых, объединенных *логическими операциями.*

Переключательной функцией (функцией алгебры логики) называется такая функция f(x1,x2,…,xn), которая так же как и ее аргументы хi может принимать только два значения 0 или 1.Запись вида (x1,x2,x3,…,xn), где каждая переменная хi принимает значения 0 или 1, называется набором. Переключательные функции реализуются на логических элементах. Набор логических элементов, на которых можно реализовать любую переключательную функцию, называется функционально полным. Переключательная функция задается с помощью таблицы истинности, в которой перечисляют возможные наборы и значения функции.

## Основные операции

Здесь мы приведем операции, которые состовляют один из функционально полных наборов и реализованы в каждом современном языке программирования.

### Конъюнкция

Конъюнкция (логическое "И") операция между двумя высказываниями, которое порождает третье высказывание, которое истинно, когда истинны оба высказывания. Таблица истинности для этой операции выглядит следующим образом.

| A   | B   | A and B |
|-----|-----|---------|
| 0   | 0   | 0       |
| 0   | 1   | 0       |
| 1   | 0   | 0       |
| 1   | 1   | 1       |

Обратите внимание, что наборы заполняются по порядку их десятичного представления (0,1,2,3...). Настоятельная рекомендация делать так во избежание путаницы.

### Дизъюнкция

Дизъюнкция (логическое "ИЛИ") даёт третье высказывание, которое истинно, если истинно хотя бы одно из высказываний.

| A   | B   | A or B |
|-----|-----|--------|
| 0   | 0   | 0      |
| 0   | 1   | 1      |
| 1   | 0   | 1      |
| 1   | 1   | 1      |

: Таблица истинности для дизъюнкции

### Инверсия

Инверсия (логическое "НЕ") порождает отрицание исходного высказывания

| A   | not A |
|-----|-------|
| 0   | 1     |
| 1   | 0     |

: Таблица истинности для инверсии

### Приоритет и свойства операций

Операции выполняются слева направо в соответствии с следующим приоритетом:

1.  Операции в скобках
2.  Инверсия
3.  Конъюнкция
4.  Дизъюнкция
5.  Прочие операции

Свойства операций представлена на @fig-logic_props. Галочка вверх - альтернативное обозначение конъюнкции, галочка вниз - дизъюнкции, верхнее подчеркивание - инверсии.

![Свойства логических операций](images/2_logic_props.png){#fig-logic_props}

## Примеры заданий

1.  Составьте таблицу истинности для следующего высказывания $D = A \land \lnot{С} \lor B \land (C \lor \lnot A)$

    "Уголок" обозначение инверсии.

    Сначала нужно раставить приоритет операций:

    1.  not A
    2.  C or not A
    3.  not C
    4.  A and not C
    5.  B and (C or not A)
    6.  п. 3 or п. 4

    Составим таблицу истинности, перечисля все наборы в порядке их возрастания двоичного кода (0, 1, 2, 3, 4...) и заведем для каждого действия столбец.

    | A   | B   | C   | not A | C or not A | not C | A and not C | B and (C or not A) | D   |
    |-----|-----|-----|-------|------------|-------|-------------|--------------------|-----|
    | 0   | 0   | 0   | 1     | 1          | 1     | 0           | 0                  | 0   |
    | 0   | 0   | 1   | 1     | 1          | 0     | 0           | 0                  | 0   |
    | 0   | 1   | 0   | 1     | 1          | 1     | 0           | 1                  | 1   |
    | 0   | 1   | 1   | 1     | 1          | 0     | 0           | 1                  | 1   |
    | 1   | 0   | 0   | 0     | 0          | 1     | 1           | 0                  | 1   |
    | 1   | 0   | 1   | 0     | 1          | 0     | 0           | 0                  | 0   |
    | 1   | 1   | 0   | 0     | 0          | 1     | 1           | 0                  | 1   |
    | 1   | 1   | 1   | 0     | 1          | 0     | 0           | 1                  | 1   |

    : Ответ

2.  Упростите выражение $D = A \land B \land C \lor A\land \lnot(B \land C) \lor \lnot A$

    $$
    A \land B \land C \lor A\land \lnot (B \land C) \lor \lnot A = A \land (B \land C \lor \lnot(B \land C)) \lor \lnot A = A \lor \lnot A = 1
    $$

    ::: callout-note
    ## Совет

    Для записи конъюнкции и дизъюнкции можно использовать знаки умножить и сложить. Так проще воспринимать выражение.
    :::

## Подведение итогов

1.  Благодаря логическим операциям возможно написание алгоритмов, т.е. программирование
2.  Основная единица в логике - высказывание, которое можно делать составным, благодаря логическим операциям
3.  Основные логические операции - конъюнкция (логическое умножение), дизъюнкция (логическое сложение), инверсия (отрицание). С их помощью можно реализовать любую логическую функцию и они есть в любом языке программирования.

## Задание

1.  Составьте таблицу истинности для следующего высказывания $D = B * (C + \lnot B) * B * A$
2.  Упростите выражение $D = (B + \lnot C + A)*(\lnot A + B + \lnot C)$